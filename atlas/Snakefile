import os
import re
import sys
import tempfile


# global defaults
JAVA_MEM = 32
PREPROCESS_ADAPTER_MIN_K = 8
PREPROCESS_MINIMUM_BASE_QUALITY = 10
PREPROCESS_ALLOWABLE_KMER_MISMATCHES = 1
PREPROCESS_REFERENCE_KMER_MATCH_LENGTH = 27
QTRIM = "rl"
PREPROCESS_MINIMUM_PASSING_READ_LENGTH = 51
PREPROCESS_MINIMUM_BASE_FREQUENCY = 0.05

CONTAMINANT_MAX_INDEL = 20
CONTAMINANT_MIN_RATIO = 0.65
CONTAMINANT_MINIMUM_HITS = 1
CONTAMINANT_AMBIGUOUS = "best"
CONTAMINANT_KMER_LENGTH = 13

NORMALIZATION_KMER_LENGTH = 21
NORMALIZATION_TARGET_DEPTH = 100
NORMALIZATION_MINIMUM_KMERS = 15

MEGAHIT_MEMORY = 0.90
MEGAHIT_MIN_COUNT = 2
MEGAHIT_K_MIN = 21
MEGAHIT_K_MAX = 121
MEGAHIT_K_STEP = 20
MEGAHIT_MERGE_LEVEL = "20,0.98"
MEGAHIT_PRUNE_LEVEL = 2
MEGAHIT_LOW_LOCAL_RATIO = 0.2
SPADES_K = "auto"
MINIMUM_CONTIG_LENGTH = 1000

MINIMUM_AVERAGE_COVERAGE = 5
MINIMUM_PERCENT_COVERED_BASES = 40
MINIMUM_MAPPED_READS = 0
MINIMUM_CONTIG_LENGTH = 1000
CONTIG_TRIM_BP = 0

MINIMUM_REGION_OVERLAP = 1
MAXIMUM_COUNTED_MAP_SITES = 10
PROKKA_KINGDOM = "Bacteria"

MAXBIN_MAX_ITERATION = 50
MAXBIN_MIN_CONTIG_LENGTH = 200
MAXBIN_PROB_THRESHOLD = 0.9

DIAMOND_TOP_SEQS = 2
DIAMOND_E_VALUE = 0.000001
DIAMOND_MIN_IDENTITY = 50
DIAMOND_QUERY_COVERAGE = 60
DIAMOND_GAP_OPEN = 11
DIAMOND_GAP_EXTEND = 1
DIAMOND_BLOCK_SIZE = 2
DIAMOND_INDEX_CHUNKS = 4

SUMMARY_METHOD = "lca"
AGGREGATION_METHOD = "lca-majority"
MAJORITY_THRESHOLD = 0.51
MIN_BITSCORE = 0
MIN_LENGTH = 20
MAX_HITS = 100


def get_conda_envs_dir():
    if config.get("yaml_dir"):
        yaml_dir = config.get("yaml_dir")
    else:
        yaml_dir = os.path.join(os.path.dirname(os.path.abspath(workflow.snakefile)), "envs")
    if not os.path.exists(yaml_dir):
        sys.exit("Unable to locate the environmental dependencies file; tried %s" % yaml_dir)
    return yaml_dir


def get_temp_dir(config):
    if config.get("tmpdir"):
        tmp_dir = config["tmpdir"]
    else:
        tmp_dir = tempfile.gettempdir()
    return tmp_dir


def get_contaminant_output_files(samples, config):
    ret_str = ""
    if "contaminant_references" in config.keys():
        if len(config["contaminant_references"]) > 0:
            ret_str = expand("{sample}/sequence_quality_control/{sample}_02_{decon_dbs}.fastq.gz",
                          sample=samples, decon_dbs=list(config["contaminant_references"].keys()))
    return ret_str


def get_bin_summary_files(do_binning, samples):
    ret_str = ""
    if do_binning:
        ret_str = expand("{sample}/genomic_bins/{sample}.summary",
                      sample=samples)
    return ret_str


def get_shell_prefix(config, override={}):
    pfx = config.get("prefix")
    if not pfx:
        return ""

    keys = re.findall(r"__(\w+)__", pfx)
    for k in keys:
        if k in override:
            v = override[k]
        else:
            v = config.get(k, "")
        pfx = pfx.replace("__{key}__".format(key=k), str(v))
    return pfx


def update_config_file_paths(config):
    for sample in config["samples"]:
        try:
            # convert string into list
            if isinstance(config["samples"][sample]["fastq"], str):
                config["samples"][sample]["fastq"] = [config["samples"][sample]["fastq"]]
        # fastq is not required for annotation alone
        except KeyError:
            continue
    return config


CONDAENV = get_conda_envs_dir()


if config.get("workflow", "complete") == "complete":
    config = update_config_file_paths(config)
    SHPFXM = get_shell_prefix(config)
    SHPFXS = get_shell_prefix(config, {"threads": "1"})

    # TABLES = get_count_tables(config, "summary_counts")
    TMPDIR = get_temp_dir(config)
    CHECKMDIR = os.path.join(os.path.dirname(os.path.realpath(config.get("diamond_db", "."))), "checkm")

    SAMPLES = [i for i in config["samples"].keys()]

    wildcard_constraints:
        sample = "[\w-]+"

    rule all:
        input:
            get_contaminant_output_files(SAMPLES, config),
            expand("{sample}/sequence_quality_control/{sample}_decontamination_reference_stats.txt",
                sample=SAMPLES),
            expand("{sample}/sequence_quality_control/{sample}_00_pe.fastq.gz",
                sample=SAMPLES),
            expand("{sample}/logs/{sample}_quality_filtering_stats.txt",
                sample=SAMPLES),
            expand("{sample}/assembly/contig_stats/prefilter_contig_stats.txt",
                sample=SAMPLES),
            expand("{sample}/assembly/contig_stats/final_contig_stats.txt",
                sample=SAMPLES),
            get_bin_summary_files(config.get("perform_genome_binning", True), SAMPLES),
            expand("{sample}/{sample}_annotations.txt", sample=SAMPLES)

    include: "rules/assemble.snakefile"

elif config.get("workflow") == "download":

    FILES = {"adapters.fa": "ae839dc79cfb855a1b750a0d593fe01e",
             "phiX174_virus.fa": "82516880142e8c89b466bc6118696c47",
             "refseq.db": "42b8976656f2cfd661b8a299d6e24c19",
             "refseq.dmnd": "c01facc7e397270ccb796ea799a09108",
             "refseq.tree": "469fcbeb15dd0d4bf8f1677682bde157",
             "silva_rfam_all_rRNAs.fa": "f102e35d9f48eabeb0efe9058559bc66"}

    rule all:
        input:
            expand("{dir}/{filename}", dir=os.path.realpath(config["db_dir"]), filename=list(FILES.keys()))

    include: "rules/download.snakefile"

elif config.get("workflow") == "annotate":
    config = update_config_file_paths(config)
    SAMPLES = list(config["samples"].keys())
    TMPDIR = get_temp_dir(config)
    SHPFXM = get_shell_prefix(config)
    SHPFXS = get_shell_prefix(config, {"threads": "1"})
    CHECKMDIR = os.path.join(os.path.dirname(os.path.realpath(config.get("diamond_db", "."))), "checkm")

    rule all:
        input:
            expand("{sample}_annotations.txt", sample=SAMPLES),
            expand("{sample}/contig_stats.txt", sample=SAMPLES)

    include: "rules/annotate.snakefile"

else:
    print("Workflow %s is not a defined workflow." % config.get("workflow", "[no --workflow specified]"),
          file=sys.stderr)
